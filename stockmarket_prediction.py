# -*- coding: utf-8 -*-
"""stockmarket prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15IFE_ch2FGRtwfuGUQMG3EhwbKEd3QDa
"""

import kagglehub

# Download latest version
path = kagglehub.dataset_download("engrhaseebjan/a-simple-stock-market-prediction-dataset")

print("Path to dataset files:", path)

import kagglehub
import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Download the dataset
dataset_path = kagglehub.dataset_download("engrhaseebjan/a-simple-stock-market-prediction-dataset")
print("Path to dataset files:", dataset_path)

# Use the correct file name and path
file_path = os.path.join(dataset_path, "dataset 2010 to 2021.csv")
data = pd.read_csv(file_path)

# Display the first few rows
print(data.head())

# Convert the 'Date' column to a datetime object
data['Date'] = pd.to_datetime(data['Date'])

# Check for missing values
print(data.isnull().sum())

# Select features (Open, High, Low) and the target variable (Close)
X = data[['Open', 'High', 'Low']]
y = data['Close']

# Print the shape of the features and target
print("Features shape:", X.shape)
print("Target shape:", y.shape)

from sklearn.model_selection import train_test_split

# Split the data into training (80%) and testing (20%) sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Print the size of each split
print("Training set size:", len(X_train))
print("Testing set size:", len(X_test))

from sklearn.linear_model import LinearRegression

# Initialize the Linear Regression model
model = LinearRegression()

# Train the model on the training data
model.fit(X_train, y_train)

# Display the model's coefficients and intercept
print("Coefficients:", model.coef_)
print("Intercept:", model.intercept_)

# Predict the 'Close' values for the test set
y_pred = model.predict(X_test)

# Display the first 5 predicted values alongside the actual values
for i in range(5):
    print(f"Actual: {y_test.iloc[i]:.2f}, Predicted: {y_pred[i]:.2f}")

from sklearn.metrics import mean_squared_error, r2_score

# Calculate Mean Squared Error (MSE) and R-squared (R2) score
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse:.2f}")
print(f"R-squared: {r2:.2f}")

import matplotlib.pyplot as plt

# Plot actual vs predicted values
plt.figure(figsize=(10, 6))
plt.plot(range(len(y_test)), y_test, label='Actual Values', color='blue', alpha=0.7)
plt.plot(range(len(y_pred)), y_pred, label='Predicted Values', color='red', alpha=0.7)
plt.title("Actual vs Predicted Stock Prices")
plt.xlabel("Index")
plt.ylabel("Stock Price")
plt.legend()
plt.show()

import joblib

# Save the model to a file
model_filename = 'linear_regression_stock_model.pkl'
joblib.dump(model, model_filename)

print(f"Model saved as {model_filename}")